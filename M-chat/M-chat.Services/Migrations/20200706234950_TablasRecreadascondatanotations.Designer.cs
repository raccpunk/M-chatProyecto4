// <auto-generated />
using System;
using M_chat.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace M_chat.Services.Migrations
{
    [DbContext(typeof(AppBDContext))]
    [Migration("20200706234950_TablasRecreadascondatanotations")]
    partial class TablasRecreadascondatanotations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("M_chat.Models.CentroEducativo", b =>
                {
                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NivelEducativo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Representante")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Clave");

                    b.ToTable("CentroEducativo");
                });

            modelBuilder.Entity("M_chat.Models.Cuestionario", b =>
                {
                    b.Property<int>("IdCuestionario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Curpninio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaAplicacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("ninioCurp")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("tutorEmail")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdCuestionario");

                    b.HasIndex("ninioCurp");

                    b.HasIndex("tutorEmail");

                    b.ToTable("Cuestionario");
                });

            modelBuilder.Entity("M_chat.Models.Diagnostico", b =>
                {
                    b.Property<int>("IdDiagnostico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NinioCurp")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Resultado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdDiagnostico");

                    b.HasIndex("NinioCurp");

                    b.ToTable("Diagnostico");
                });

            modelBuilder.Entity("M_chat.Models.Ninio", b =>
                {
                    b.Property<string>("Curp")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaveEscuela")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("centroEducativoClave")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("tutorEmail")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Curp");

                    b.HasIndex("centroEducativoClave");

                    b.HasIndex("tutorEmail");

                    b.ToTable("Ninio");
                });

            modelBuilder.Entity("M_chat.Models.Respuestas", b =>
                {
                    b.Property<int>("IdRespuesta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CuestionarioIdCuestionario")
                        .HasColumnType("int");

                    b.Property<string>("Respuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.HasKey("IdRespuesta");

                    b.HasIndex("CuestionarioIdCuestionario");

                    b.ToTable("Respuestas");
                });

            modelBuilder.Entity("M_chat.Models.Tutor", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contrasenia")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Curp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Email");

                    b.ToTable("Tutor");
                });

            modelBuilder.Entity("M_chat.Models.Cuestionario", b =>
                {
                    b.HasOne("M_chat.Models.Ninio", "ninio")
                        .WithMany("cuestionario")
                        .HasForeignKey("ninioCurp");

                    b.HasOne("M_chat.Models.Tutor", "tutor")
                        .WithMany()
                        .HasForeignKey("tutorEmail");
                });

            modelBuilder.Entity("M_chat.Models.Diagnostico", b =>
                {
                    b.HasOne("M_chat.Models.Ninio", null)
                        .WithMany("diagnosticos")
                        .HasForeignKey("NinioCurp");
                });

            modelBuilder.Entity("M_chat.Models.Ninio", b =>
                {
                    b.HasOne("M_chat.Models.CentroEducativo", "centroEducativo")
                        .WithMany("Ninio")
                        .HasForeignKey("centroEducativoClave");

                    b.HasOne("M_chat.Models.Tutor", "tutor")
                        .WithMany("Ninio")
                        .HasForeignKey("tutorEmail");
                });

            modelBuilder.Entity("M_chat.Models.Respuestas", b =>
                {
                    b.HasOne("M_chat.Models.Cuestionario", null)
                        .WithMany("Respuestas")
                        .HasForeignKey("CuestionarioIdCuestionario");
                });
#pragma warning restore 612, 618
        }
    }
}
